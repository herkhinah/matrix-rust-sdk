initSidebarItems({"attr":[["async_trait",""]],"enum":[["CustomEvent","This represents the various “unrecognized” events."],["Error","Internal representation of errors."],["HttpError","An HTTP error, representing either a connection error or an error while converting the raw HTTP response into a Matrix response."],["LocalTrust","The local trust state of a device."],["LoopCtrl","Enum controlling if a loop running callbacks should continue or abort."],["RoomType","Enum keeping track in which state the room is, e.g. if our own user is joined, invited, or has left the room."],["StoreError","State store specific error type."]],"mod":[["deserialized_responses",""],["executor","Abstraction over an executor so we can spawn tasks under WASM the same way we do usually."],["instant",""],["locks",""],["media","Common types for media content."],["room","High-level room API"],["uuid","Generate and parse UUIDs."],["verification","Interactive verification for E2EE capable users and devices in Matrix."]],"struct":[["BaseRoom","The underlying room data structure collecting state for joined, left and invited rooms."],["BaseRoomMember","A member of a room."],["Client","An async/await enabled Matrix client."],["ClientConfig","Configuration for the creation of the `Client`."],["Device","A device represents a E2EE capable client of an user."],["EncryptionInfo","Struct holding all the information that is needed to decrypt an encrypted file."],["RequestConfig","Configuration for requests the `Client` makes."],["RoomInfo","The underlying pure data structure for joined and left rooms."],["RoomMember","The high-level `RoomMember` representation"],["Session","A user session, containing an access token and information about the associated user account."],["StateChanges","Store state changes and pass them to the StateStore."],["SyncSettings","Settings for a sync call."]],"trait":[["AsyncTraitDeps","Super trait that is used for our store traits, this trait will differ if it’s used on WASM. WASM targets will not require `Send` and `Sync` to have implemented, while other targets will."],["EventHandler","This trait allows any type implementing `EventHandler` to specify event callbacks for each event. The `Client` calls each method when the corresponding event is received."],["HttpSend","Abstraction around the http layer. The allows implementors to use different http libraries."]],"type":[["Result","Result type of the rust-sdk."]]});