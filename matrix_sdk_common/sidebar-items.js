initSidebarItems({"attr":[["async_trait",""]],"derive":[["Outgoing","Derive the `Outgoing` trait, possibly generating an ‘Incoming’ version of the struct this derive macro is used on. Specifically, if no lifetime variables are used on any of the fields of the struct, this simple implementation will be generated:"]],"enum":[["AuthScheme","Authentication scheme used by the endpoint."],["CanonicalJsonValue","Represents a canonical JSON value as per the Matrix specification."],["FromHttpRequestError","An error when converting a http request to one of ruma’s endpoint-specific request types."],["FromHttpResponseError","An error when converting a http response to one of Ruma’s endpoint-specific response types."],["IntoHttpError","An error when converting one of ruma’s endpoint-specific request or response types to the corresponding http type."],["SendAccessToken","An enum to control whether an access token should be added to outgoing requests"],["ServerError","An error was reported by the server (HTTP status code 4xx or 5xx)"]],"macro":[["assign","Mutate a struct value in a declarative style."],["int","Creates an `Int` from a numeric literal."],["uint","Creates a `UInt` from a numeric literal."]],"mod":[["deserialized_responses",""],["directory","Common types for room directory endpoints."],["encryption","Common types for encryption related tasks."],["executor","Abstraction over an executor so we can spawn tasks under WASM the same way we do usually."],["locks",""],["presence","Common types for the presence module."],["push","Common types for the push notifications module."],["receipt","Common types for receipts."],["thirdparty","Common types for the third party networks module."],["urlencoded","`x-www-form-urlencoded` meets Serde"]],"struct":[["Int","An integer limited to the range of integers that can be represented exactly by an f64."],["MatrixError","A general-purpose Matrix error type consisting of an HTTP status code and a JSON body."],["MilliSecondsSinceUnixEpoch","A timestamp represented as the number of milliseconds since the unix epoch."],["Raw","A wrapper around `Box<RawValue>`, to be used in place of any type in the Matrix endpoint definition to allow request and response types to contain that said type represented by the generic argument `Ev`."],["SecondsSinceUnixEpoch","A timestamp represented as the number of seconds since the unix epoch."],["SerdeError","A minimal representation of all possible errors that can occur using the `IntoDeserializer` trait."],["UInt","An integer limited to the range of non-negative integers that can be represented exactly by an f64."]],"trait":[["AsyncTraitDeps","Super trait that is used for our store traits, this trait will differ if it’s used on WASM. WASM targets will not require `Send` and `Sync` to have implemented, while other targets will."],["EndpointError","Gives users the ability to define their own serializable / deserializable errors."],["IncomingRequest","A request type for a Matrix API endpoint, used for receiving requests."],["IncomingResponse","A response type for a Matrix API endpoint, used for receiving responses."],["Outgoing","A type that can be sent to another party that understands the matrix protocol."],["OutgoingRequest","A request type for a Matrix API endpoint, used for sending requests."],["OutgoingRequestAppserviceExt","An extension to `OutgoingRequest` which provides Appservice specific methods."]]});